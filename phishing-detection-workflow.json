{
  "name": "Phishing Analysis",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1880,
        -260
      ],
      "id": "49d651b0-f041-4708-b0f0-4f398b4e2333",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "command": "cat /data/email4.eml"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1500,
        -460
      ],
      "id": "9facea3a-8cf5-4db5-8ca2-0406f07eb29d",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "jsCode": "const emailContent = $json[\"stdout\"] || \"\";\nconst domainRegex = /\\b(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}\\b/g;\nconst ipRegex = /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/g;\nconst privateIpRanges = [\n    /^10\\./, /^172\\.(1[6-9]|2[0-9]|3[0-1])\\./, /^192\\.168\\./,\n    /^127\\./, /^169\\.254\\./\n];\nconst unwantedDomains = [\n    /\\.outlook\\.com$/,\n    /\\.protection\\.outlook\\.com$/,\n    /\\.office365\\.com$/,\n    /^time\\.https$/,\n    /^smtp\\.mailfrom$/, /^header\\.from$/\n];\nconst validTLDs = [\"com\", \"net\", \"org\", \"io\", \"gov\", \"edu\", \"co\", \"uk\", \"us\", \"ca\", \"in\"];\nlet domains = [...new Set(emailContent.match(domainRegex) || [])];\nlet ips = [...new Set(emailContent.match(ipRegex) || [])];\ndomains = domains.filter(domain => {\n    const tld = domain.split(\".\").pop();\n    return !unwantedDomains.some(pattern => new RegExp(pattern).test(domain)) &&\n           domain.includes(\".\") &&\n           validTLDs.includes(tld) &&\n           domain.length <= 50 &&\n           !/^\\d+$/.test(domain);\n});\nips = ips.filter(ip => !privateIpRanges.some(regex => regex.test(ip)));\nreturn domains.map(domain => ({ json: { type: \"Domain\", value: domain } }))\n    .concat(ips.map(ip => ({ json: { type: \"IP\", value: ip } })));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1140,
        -160
      ],
      "id": "bf615eb3-88ae-426a-8e16-6bf9226a3190",
      "name": "Code",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "curlImport": "",
        "httpVariantWarning": "",
        "method": "GET",
        "url": "=https://www.virustotal.com/api/v3/{{$json[\"type\"] === \"Domain\" ? \"domains\" : \"ip_addresses\"}}/{{$json[\"value\"]}}\n",
        "": "",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "virusTotalApi",
        "provideSslCertificates": false,
        "sendQuery": false,
        "sendHeaders": true,
        "specifyHeaders": "keypair",
        "headerParameters": {
          "parameters": [
            {
              "name": "Domain",
              "value": "application/json"
            }
          ]
        },
        "sendBody": false,
        "options": {},
        "infoMessage": ""
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -860,
        -460
      ],
      "id": "6b987885-bcdc-457d-a053-a833b09326ed",
      "name": "VirusTotal HTTP Request",
      "extendsCredential": "virusTotalApi",
      "credentials": {
        "virusTotalApi": {
          "id": "3G6TN0pE37bHabxh",
          "name": "VirusTotal account"
        }
      }
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -420,
        -180
      ],
      "id": "b17badfe-cf41-4c79-a497-981ee958998c",
      "name": "Wait",
      "webhookId": "5c895bc9-7671-4dfb-a978-133eb77c490c"
    },
    {
      "parameters": {
        "jsCode": "const maliciousEntries = [];\n\nfor (const entry of items) {\n  try {\n    const data = entry.json.data;\n    const attributes = data.attributes;\n    const stats = attributes.last_analysis_stats || {};\n    const isMalicious = stats.malicious > 0;\n    const scanResults = attributes.results || {};\n    const positives = Object.values(scanResults).filter(r => r.category === 'malicious').length;\n\n    if (isMalicious || positives > 0) {\n      maliciousEntries.push({\n        type: data.type,\n        value: data.id,\n        malicious_count: stats.malicious || positives,\n        detection_details: attributes.last_analysis_results\n      });\n    }\n  } catch (error) {\n    console.error(`Error processing entry: ${error.message}`);\n  }\n}\n\nreturn maliciousEntries.map(entry => ({ json: entry }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        -360
      ],
      "id": "3a437eac-5d56-41b8-a94a-64b62e11e547",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "VirusTotal HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VirusTotal HTTP Request": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1b4294ed-d14c-4e25-9e6e-61e3f31f8e2d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9861a28cf9a13aec816a4d2c57a793d83141d92b438a8a96f03b86e89a9a94cf"
  },
  "id": "YxMUhdNQV7oPv7WV",
  "tags": [
    {
      "createdAt": "2025-04-02T13:45:20.174Z",
      "updatedAt": "2025-04-02T13:45:20.174Z",
      "id": "IFFQEMtVAQUcJfZC",
      "name": "Phishing Analysis"
    }
  ]
}